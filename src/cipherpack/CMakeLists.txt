#
# Botan static upfront using different compiler options (supress warnings)
#
set (botan_LIB_SRCS
  ${AMALGAMATION_ARCH_INC}/botan_all.cpp
)

add_library (botan STATIC ${botan_LIB_SRCS})
target_include_directories(botan PRIVATE ${AMALGAMATION_ARCH_INC})
target_compile_options(botan PRIVATE -fPIC -Wno-cast-align -Wno-unused-parameter -Wno-unused-but-set-variable -Wno-array-parameter -Wno-maybe-uninitialized)
set_target_properties(botan PROPERTIES CXX_CLANG_TIDY "")

#
# Cipherpack
#

set (cipherpack_LIB_INCLUDE_DIRS
  ${PROJECT_SOURCE_DIR}/jaulib/include
  ${AMALGAMATION_ARCH_INC}
  ${PROJECT_SOURCE_DIR}/include
)

include_directories(
  ${cipherpack_LIB_INCLUDE_DIRS}
  ${CMAKE_CURRENT_BINARY_DIR}
  ${SYS_INCLUDE_DIRS}
)

set (cipherpack_LIB_SRCS
  ${PROJECT_SOURCE_DIR}/jaulib/src/debug.cpp
  ${PROJECT_SOURCE_DIR}/jaulib/src/basic_types.cpp
  ${PROJECT_SOURCE_DIR}/jaulib/src/base_codec.cpp
  ${PROJECT_SOURCE_DIR}/jaulib/src/environment.cpp
  ${PROJECT_SOURCE_DIR}/jaulib/src/cpuid.cpp
  ${PROJECT_SOURCE_DIR}/jaulib/src/file_util.cpp
  ${PROJECT_SOURCE_DIR}/jaulib/src/io_util.cpp
  ${PROJECT_SOURCE_DIR}/jaulib/src/byte_stream.cpp
  ${PROJECT_SOURCE_DIR}/src/cipherpack/crypto0.cpp
  ${PROJECT_SOURCE_DIR}/src/cipherpack/crypto1.cpp
# autogenerated files
  ${CMAKE_CURRENT_BINARY_DIR}/../version.cpp
)

add_library (cipherpack SHARED ${cipherpack_LIB_SRCS})
target_link_libraries (
  cipherpack
  botan
  ${LIBCURL_LIBNAME}
  ${LIBUNWIND_LIBNAME}
  ${CMAKE_THREAD_LIBS_INIT}
)

# if(CMAKE_COMPILER_IS_GNUCC)
# botan fails on cast align etc
target_compile_options(cipherpack PUBLIC "-Wno-cast-align" "-Wno-unused-parameter" "-Wno-inline-asm")
# endif(CMAKE_COMPILER_IS_GNUCC)

if(USE_STRIP)
add_custom_command(TARGET cipherpack POST_BUILD
                   COMMAND ${STRIP} ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_SHARED_LIBRARY_PREFIX}cipherpack${CMAKE_SHARED_LIBRARY_SUFFIX}.${cipherpack_VERSION_SHORT}
                   COMMENT "stripping cipherpack"
                   VERBATIM
                   )
endif(USE_STRIP)

set_target_properties(
   cipherpack
   PROPERTIES
   SOVERSION ${cipherpack_VERSION_MAJOR}
   VERSION ${cipherpack_VERSION_SHORT}
)
install (DIRECTORY ${PROJECT_SOURCE_DIR}/include/cipherpack/ DESTINATION include/cipherpack)

macro (cipherpack_CREATE_INSTALL_PKGCONFIG generated_file install_location)
  configure_file (${generated_file}.cmake ${CMAKE_CURRENT_BINARY_DIR}/${generated_file} @ONLY)
  install (FILES ${CMAKE_CURRENT_BINARY_DIR}/${generated_file} DESTINATION ${install_location})
endmacro (cipherpack_CREATE_INSTALL_PKGCONFIG)
cipherpack_create_install_pkgconfig (cipherpack.pc lib${LIB_SUFFIX}/pkgconfig)

install(TARGETS cipherpack LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR})

